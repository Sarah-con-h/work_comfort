[1mdiff --git a/src/modules/empleado.py b/src/modules/empleado.py[m
[1mindex e69de29..4c47990 100644[m
[1m--- a/src/modules/empleado.py[m
[1m+++ b/src/modules/empleado.py[m
[36m@@ -0,0 +1,249 @@[m
[32m+[m[32mimport os[m
[32m+[m
[32m+[m[32mclass Empleado:[m
[32m+[m[32m    """Clase que representa un empleado de la organizaci√≥n"""[m
[32m+[m[41m    [m
[32m+[m[32m    def __init__(self, id_empleado, nombre, area, cargo):[m
[32m+[m[32m        """[m
[32m+[m[32m        Constructor de la clase Empleado[m
[32m+[m[41m        [m
[32m+[m[32m        Args:[m
[32m+[m[32m            id_empleado (int): Identificador √∫nico del empleado[m
[32m+[m[32m            nombre (str): Nombre completo del empleado[m
[32m+[m[32m            area (str): √Årea o departamento donde trabaja[m
[32m+[m[32m            cargo (str): Cargo o posici√≥n del empleado[m
[32m+[m[32m        """[m
[32m+[m[32m        self.id_empleado = id_empleado[m
[32m+[m[32m        self.nombre = nombre[m
[32m+[m[32m        self.area = area[m
[32m+[m[32m        self.cargo = cargo[m
[32m+[m[41m    [m
[32m+[m[32m    def to_string(self):[m
[32m+[m[32m        """Convierte el empleado a formato de texto para guardar"""[m
[32m+[m[32m        return f"{self.id_empleado}|{self.nombre}|{self.area}|{self.cargo}"[m
[32m+[m[41m    [m
[32m+[m[32m    @staticmethod[m
[32m+[m[32m    def from_string(linea):[m
[32m+[m[32m        """[m
[32m+[m[32m        Crea un objeto Empleado desde una l√≠nea de texto[m
[32m+[m[41m        [m
[32m+[m[32m        Args:[m
[32m+[m[32m            linea (str): L√≠nea con formato: id|nombre|area|cargo[m
[32m+[m[41m            [m
[32m+[m[32m        Returns:[m
[32m+[m[32m            Empleado: Objeto empleado creado[m
[32m+[m[32m        """[m
[32m+[m[32m        try:[m
[32m+[m[32m            partes = linea.strip().split('|')[m
[32m+[m[32m            if len(partes) != 4:[m
[32m+[m[32m                raise ValueError("Formato inv√°lido de empleado")[m
[32m+[m[32m            return Empleado(int(partes[0]), partes[1], partes[2], partes[3])[m
[32m+[m[32m        except Exception as e:[m
[32m+[m[32m            print(f"Error al leer empleado: {e}")[m
[32m+[m[32m            return None[m
[32m+[m[41m    [m
[32m+[m[32m    def __str__(self):[m
[32m+[m[32m        """Representaci√≥n en string del empleado"""[m
[32m+[m[32m        return f"[{self.id_empleado}] {self.nombre} - {self.cargo} ({self.area})"[m
[32m+[m
[32m+[m
[32m+[m[32mdef agregar_empleado(empleado, archivo='src/data/empleados.txt'):[m
[32m+[m[32m    """[m
[32m+[m[32m    Agrega un empleado al archivo de datos[m
[32m+[m[41m    [m
[32m+[m[32m    Args:[m
[32m+[m[32m        empleado (Empleado): Objeto empleado a guardar[m
[32m+[m[32m        archivo (str): Ruta del archivo de empleados[m
[32m+[m[32m    """[m
[32m+[m[32m    try:[m
[32m+[m[32m        # Crear directorio si no existe[m
[32m+[m[32m        os.makedirs(os.path.dirname(archivo), exist_ok=True)[m
[32m+[m[41m        [m
[32m+[m[32m        # Agregar al archivo[m
[32m+[m[32m        with open(archivo, 'a', encoding='utf-8') as f:[m
[32m+[m[32m            f.write(empleado.to_string() + '\n')[m
[32m+[m[32m        print(f"‚úì Empleado '{empleado.nombre}' registrado exitosamente")[m
[32m+[m[32m    except Exception as e:[m
[32m+[m[32m        print(f"‚úó Error al guardar empleado: {e}")[m
[32m+[m
[32m+[m
[32m+[m[32mdef cargar_empleados(archivo='src/data/empleados.txt'):[m
[32m+[m[32m    """[m
[32m+[m[32m    Carga todos los empleados desde el archivo[m
[32m+[m[41m    [m
[32m+[m[32m    Args:[m
[32m+[m[32m        archivo (str): Ruta del archivo de empleados[m
[32m+[m[41m        [m
[32m+[m[32m    Returns:[m
[32m+[m[32m        list: Lista de objetos Empleado[m
[32m+[m[32m    """[m
[32m+[m[32m    empleados = [][m
[32m+[m[32m    try:[m
[32m+[m[32m        if not os.path.exists(archivo):[m
[32m+[m[32m            print(f"‚ö† El archivo {archivo} no existe. Se crear√° al agregar empleados.")[m
[32m+[m[32m            return empleados[m
[32m+[m[41m        [m
[32m+[m[32m        with open(archivo, 'r', encoding='utf-8') as f:[m
[32m+[m[32m            for linea in f:[m
[32m+[m[32m                if linea.strip():  # Ignorar l√≠neas vac√≠as[m
[32m+[m[32m                    emp = Empleado.from_string(linea)[m
[32m+[m[32m                    if emp:[m
[32m+[m[32m                        empleados.append(emp)[m
[32m+[m[32m    except Exception as e:[m
[32m+[m[32m        print(f"‚úó Error al cargar empleados: {e}")[m
[32m+[m[41m    [m
[32m+[m[32m    return empleados[m
[32m+[m
[32m+[m
[32m+[m[32mdef listar_empleados():[m
[32m+[m[32m    """Muestra en consola todos los empleados registrados"""[m
[32m+[m[32m    empleados = cargar_empleados()[m
[32m+[m[41m    [m
[32m+[m[32m    if not empleados:[m
[32m+[m[32m        print("\n‚ö† No hay empleados registrados")[m
[32m+[m[32m        return[m
[32m+[m[41m    [m
[32m+[m[32m    print("\n" + "="*60)[m
[32m+[m[32m    print("  LISTA DE EMPLEADOS")[m
[32m+[m[32m    print("="*60)[m
[32m+[m[32m    for emp in empleados:[m
[32m+[m[32m        print(emp)[m
[32m+[m[32m    print("="*60)[m
[32m+[m[32m    print(f"Total de empleados: {len(empleados)}")[m
[32m+[m
[32m+[m
[32m+[m[32mdef obtener_empleado_por_id(id_empleado):[m
[32m+[m[32m    """[m
[32m+[m[32m    Busca un empleado por su ID[m
[32m+[m[41m    [m
[32m+[m[32m    Args:[m
[32m+[m[32m        id_empleado (int): ID del empleado a buscar[m
[32m+[m[41m        [m
[32m+[m[32m    Returns:[m
[32m+[m[32m        Empleado: Objeto empleado encontrado o None[m
[32m+[m[32m    """[m
[32m+[m[32m    empleados = cargar_empleados()[m
[32m+[m[32m    for emp in empleados:[m
[32m+[m[32m        if emp.id_empleado == id_empleado:[m
[32m+[m[32m            return emp[m
[32m+[m[32m    return None[m
[32m+[m
[32m+[m
[32m+[m[32mdef validar_id_unico(id_empleado):[m
[32m+[m[32m    """[m
[32m+[m[32m    Verifica que el ID del empleado no exista[m
[32m+[m[41m    [m
[32m+[m[32m    Args:[m
[32m+[m[32m        id_empleado (int): ID a verificar[m
[32m+[m[41m        [m
[32m+[m[32m    Returns:[m
[32m+[m[32m        bool: True si el ID es √∫nico, False si ya existe[m
[32m+[m[32m    """[m
[32m+[m[32m    empleados = cargar_empleados()[m
[32m+[m[32m    for emp in empleados:[m
[32m+[m[32m        if emp.id_empleado == id_empleado:[m
[32m+[m[32m            return False[m
[32m+[m[32m    return True[m
[32m+[m
[32m+[m
[32m+[m[32mdef registrar_empleado_interactivo():[m
[32m+[m[32m    """Funci√≥n interactiva para registrar un empleado desde consola"""[m
[32m+[m[32m    print("\n" + "="*60)[m
[32m+[m[32m    print("  REGISTRO DE NUEVO EMPLEADO")[m
[32m+[m[32m    print("="*60)[m
[32m+[m[41m    [m
[32m+[m[32m    try:[m
[32m+[m[32m        # Solicitar ID[m
[32m+[m[32m        while True:[m
[32m+[m[32m            id_emp = input("ID del empleado: ").strip()[m
[32m+[m[32m            if not id_emp.isdigit():[m
[32m+[m[32m                print("‚úó El ID debe ser un n√∫mero entero")[m
[32m+[m[32m                continue[m
[32m+[m[32m            id_emp = int(id_emp)[m
[32m+[m[32m            if not validar_id_unico(id_emp):[m
[32m+[m[32m                print("‚úó Este ID ya existe. Ingrese otro.")[m
[32m+[m[32m                continue[m
[32m+[m[32m            break[m
[32m+[m[41m        [m
[32m+[m[32m        # Solicitar nombre[m
[32m+[m[32m        while True:[m
[32m+[m[32m            nombre = input("Nombre completo: ").strip()[m
[32m+[m[32m            if len(nombre) < 3:[m
[32m+[m[32m                print("‚úó El nombre debe tener al menos 3 caracteres")[m
[32m+[m[32m                continue[m
[32m+[m[32m            break[m
[32m+[m[41m        [m
[32m+[m[32m        # Solicitar √°rea[m
[32m+[m[32m        print("\n√Åreas disponibles:")[m
[32m+[m[32m        areas = ["Recursos Humanos", "Tecnolog√≠a", "Ventas", "Marketing",[m[41m [m
[32m+[m[32m                 "Finanzas", "Operaciones", "Administraci√≥n"][m
[32m+[m[32m        for i, area in enumerate(areas, 1):[m
[32m+[m[32m            print(f"  {i}. {area}")[m
[32m+[m[41m        [m
[32m+[m[32m        while True:[m
[32m+[m[32m            area_op = input("Seleccione el n√∫mero del √°rea (o escriba una nueva): ").strip()[m
[32m+[m[32m            if area_op.isdigit() and 1 <= int(area_op) <= len(areas):[m
[32m+[m[32m                area = areas[int(area_op) - 1][m
[32m+[m[32m                break[m
[32m+[m[32m            elif len(area_op) > 0:[m
[32m+[m[32m                area = area_op[m
[32m+[m[32m                break[m
[32m+[m[32m            else:[m
[32m+[m[32m                print("‚úó Debe ingresar un √°rea v√°lida")[m
[32m+[m[41m        [m
[32m+[m[32m        # Solicitar cargo[m
[32m+[m[32m        cargo = input("Cargo: ").strip()[m
[32m+[m[32m        if not cargo:[m
[32m+[m[32m            cargo = "Sin especificar"[m
[32m+[m[41m        [m
[32m+[m[32m        # Crear y guardar empleado[m
[32m+[m[32m        nuevo_empleado = Empleado(id_emp, nombre, area, cargo)[m
[32m+[m[32m        agregar_empleado(nuevo_empleado)[m
[32m+[m[41m        [m
[32m+[m[32m    except KeyboardInterrupt:[m
[32m+[m[32m        print("\n\n‚úó Registro cancelado por el usuario")[m
[32m+[m[32m    except Exception as e:[m
[32m+[m[32m        print(f"\n‚úó Error inesperado: {e}")[m
[32m+[m
[32m+[m
[32m+[m[32m# Prueba del m√≥dulo (solo se ejecuta si se corre este archivo directamente)[m
[32m+[m[32mif __name__ == "__main__":[m
[32m+[m[32m    print("=== PRUEBA DEL M√ìDULO EMPLEADO ===\n")[m
[32m+[m[41m    [m
[32m+[m[32m    # Crear empleados de prueba[m
[32m+[m[32m    emp1 = Empleado(1, "Juan P√©rez", "Recursos Humanos", "Coordinador")[m
[32m+[m[32m    emp2 = Empleado(2, "Mar√≠a Garc√≠a", "Tecnolog√≠a", "Desarrolladora")[m
[32m+[m[32m    emp3 = Empleado(3, "Carlos L√≥pez", "Ventas", "Ejecutivo")[m
[32m+[m[41m    [m
[32m+[m[32m    # Guardar empleados[m
[32m+[m[32m    agregar_empleado(emp1)[m
[32m+[m[32m    agregar_empleado(emp2)[m
[32m+[m[32m    agregar_empleado(emp3)[m
[32m+[m[41m    [m
[32m+[m[32m    # Listar empleados[m
[32m+[m[32m    listar_empleados()[m
[32m+[m[41m    [m
[32m+[m[32m    # Buscar empleado[m
[32m+[m[32m    print("\n--- B√∫squeda de empleado ---")[m
[32m+[m[32m    emp_encontrado = obtener_empleado_por_id(2)[m
[32m+[m[32m    if emp_encontrado:[m
[32m+[m[32m        print(f"Empleado encontrado: {emp_encontrado}")[m
[32m+[m[41m    [m
[32m+[m[32m    # Registro interactivo[m
[32m+[m[32m    print("\n--- Registro interactivo ---")[m
[32m+[m[32m    respuesta = input("¬øDesea registrar un empleado? (s/n): ")[m
[32m+[m[32m    if respuesta.lower() == 's':[m
[32m+[m[32m        registrar_empleado_interactivo()[m
[32m+[m[32m<<<<<<< HEAD[m
[32m+[m[32m        listar_empleados()[m
[32m+[m[32m=======[m
[32m+[m[32m        listar_empleados()[m
[32m+[m
[32m+[m[32m# **Archivo:** `src/modules/empleado.py`[m
[32m+[m
[32m+[m[32m"""Responsabilidades:[m
[32m+[m[32m- Clase `Empleado` con atributos: id, nombre, √°rea, cargo[m
[32m+[m[32m- Funci√≥n para agregar empleados[m
[32m+[m[32m- Funci√≥n para listar empleados[m
[32m+[m[32m- Guardar/cargar empleados desde archivo"""[m
[32m+[m[32m>>>>>>> 03b8455 (Responsabilidades del archivo de sarah)[m
